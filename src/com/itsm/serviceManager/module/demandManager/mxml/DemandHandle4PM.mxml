<?xml version="1.0" encoding="utf-8"?>
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:control="com.framelib.control.*"
		  xmlns:flow="com.itsm.flow.base.*"
		  xmlns:container="com.framelib.container.*"
		  xmlns:comp="com.itsm.serviceManager.component.*"
		  xmlns:mxml="com.itsm.common.mxml.*"
		  xmlns:bugmxml="com.itsm.serviceManager.common.mxml.*"
		  xmlns:code="com.itsm.serviceManager.module.bugManager.code.*"
		  width="100%" height="100%" creationComplete="init(event)" currentState="canModify">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:StringValidator id="planFinishDateV1" minLength="10" property="text"
							requiredFieldError="日期格式：YYYY-MM-DD" source="{planFinishDate}"/>  
		<mx:DateField id="nowDate" selectedDate="{now}"/>
		<code:ValidatorDate id="planFinishDateV2" endDateField="{planFinishDate}"
							errorMessage="计划完成时间不应早于当前时间！" requiredFieldError="计划完成时间不应早于当前时间！"
							startDateField="{nowDate}"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.itsm.common.utils.AppCore;
			import com.itsm.serviceManager.module.bugManager.code.BugUtil;
			
			import common.utils.TAlert;
			
			import mx.controls.DateField;
			import mx.effects.Fade;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import spark.filters.GlowFilter;
			
			//流程挂载页面必需属性--用于存储业务id
			[Bindable]
			public var billId:String;
			//流程模型
			public var oprtTypeId:String;
			//请求单所在数据库表名
			[Bindable]
			public var applyTableName:String = "T_USER_APPLY";
			//审批意见
			[Bindable]
			public var opinion:String;
			//提醒消息
			[Bindable]
			public var fadeMsg:String;
			//工具类
			private var appCore:AppCore=AppCore.getInstance();
			//业务单对象
			[Bindable]
			public var userApply:Object;
			//当前时间--主要用于“计划完成时间选择控制”
			[Bindable]
			private var now:Date = new Date();
			//表单是否有效 
			[Bindable] 
			private var formIsValid:Boolean = false;
			//表单是否为空 
			[Bindable] 
			public var formIsEmpty:Boolean = true; 
			//是否可以修改“开发经理”和“计划完成时间”
			[Bindable]
			public var canModify:Boolean = false;
			//闪烁使用的filter
			[Bindable]
			private var filter:GlowFilter = new spark.filters.GlowFilter();
			//默认情况下选择不同意(发布事件)
			[Bindable]
			private var FlowBillModi:Event;
			//持有该目前集中控制的对象。 
			private var focussedFormControl:DisplayObject; 
			//用于自动取消显示保存后的提示信息
			private var timer:Timer;
			//已选择开发经理名称
			[Bindable]
			private var developerManagerName:String;
			//当前系统ID
			[Bindable]
			private var sysID:int = -1;
			
			
			
			/**公共方法，用于调用服务器端相应的方法处理*/
			private function handle_server_method(
				componentName:String, className:String, methodName:String, arguments:Array, handleName:Function):void{
				
				appCore.dataDeal.dataRemote(componentName,className,methodName,arguments);
				appCore.dataDeal.remoteMethods.addEventListener(ResultEvent.RESULT, handleName);
			}
			
			/**将远程服务器返回的数据进行处理*/
			private function getResultObj(event:ResultEvent):Object{
				var resultStr:String = event.result.toString();	
				
				trace("流程:远程服务器返回的数据为："+resultStr);
				
				return appCore.jsonDecoder.decode(resultStr);
			}
			
			/**闪烁提示方法*/
			private var fade:Fade;
			private function showAndHideLabel(isshow:Boolean):void{
				if (isshow){
					lbBeforeSave.width=220;
					lbBeforeSave.visible = true;
					if (!fade){
						fade = new Fade();
						fade.target = lbBeforeSave;
						fade.repeatCount=0;
						fade.repeatDelay=100;
						fade.alphaTo=0;
					}
					fade.play();
				}else{
					lbBeforeSave.width=0;
					lbBeforeSave.visible = false;
					if (fade){
						fade.end();
						fade.stop();
					}
				}
			}
			
			/**挂载页面初始化*/
			public function init(event:FlexEvent):void{
				handle_server_method("demandManagerAPI","DemandManagerAPI","showDemand4FlowByID",
					[billId], loadDemand4FlowInfoInfo);
				
				this.addEventListener("willAgreeEvent",doWillAgreeeEventHandle);
			}
			
			/**当需要控制流程页面的“同意”、“不同意”按钮时，可以用该方法设置提示信息*/
			private function giveMsg(opinion:String, fadeMsg:String):void{
				this.opinion = opinion;
				this.fadeMsg = fadeMsg;
			}
			
			/**初始化处理方法查询请求单后返回数据处理方法*/
			private function loadDemand4FlowInfoInfo(event:ResultEvent):void{
				var obj:Object = getResultObj(event);
				if(obj != "0")
					userApply = obj;
				sysID = (userApply != null && userApply.hasOwnProperty("belongSystem"))
					?userApply.belongSystem.systemID:-1;
				if(!userApply.hasOwnProperty("planFinishTime") 
					|| !userApply.hasOwnProperty("developManager")){
					FlowBillModi = new Event("FlowBillModi");
					this.dispatchEvent(FlowBillModi);
				}
				//加载该需求单的流程进度记录
				AppHistoryGrid.gridMain.OnlyInit();
				AppHistoryGrid.getApproveHistory(oprtTypeId, billId);
				// 检查表单是否为空 
				formIsEmpty = planFinishDate.text == "" || 
					developmentManager.sText == "";
				showAndHideLabel(formIsEmpty);
			}
			
			
			/**将要同意*/
			public function doWillAgreeeEventHandle(event:Event):void{}
			
			/**向数据库存入数据,并且设置流程"可通过"*/
			protected function saveBtn_click_handle(event:MouseEvent):void{
				if(formIsValid && !formIsEmpty){
					//向数据库存储“开发经理”、“计划完成时间”、“受理时间”、“主需求单状态”
					handle_server_method("demandManagerAPI","DemandManagerAPI","modifyDemand4DemandFlow",
						[appCore.jsonEncoder.encode(createObject4Save())], modifyDemand4DemandFlowHandle);
				}else
					TAlert.show("输入有误,请查看页面提示信息!","温馨提示");
				formIsValid = false;
			}
			
			/**
			 * 同意后处理结果
			 */
			public function flowResult():void{
				
				//需求经理
				var projectManager:Object = new Object();
				//这是个person_id
				projectManager.id = appCore.loginUser!=null?appCore.loginUser.id:-1;
//				obj.projectManager = projectManager;
				
				handle_server_method("bugManagerAPI","BugManagerAPI","setReplyer",
					[billId, projectManager.id, BugUtil.myTrim(planFinishDate.text)],
					function():void{
						handle_server_method("bugManagerAPI","BugManagerAPI","agreeBugUserApplyFlow1st",
							[billId],flowHanelResult);});
			}
			
			/**
			 * 同意处理前调用
			 */
			public function agreeBefore():void{
				//				var flag:Boolean = false;
				//				appCore.dataDeal.dataRemote("bugManagerAPI","BugManagerAPI","setReplyer",[billId, FAppCore.FCusUser.UserId]);
				//				appCore.dataDeal.remoteMethods.addEventListener(ResultEvent.RESULT,beforeHandle);
			}
			
			private function beforeHandle(event:ResultEvent):void{
				
			}
			
			
			private function flowHanelResult(event:ResultEvent):void {
				TAlert.show("数据生效");
			}
			
			/**
			 * 不同意后处理结果
			 */
			public function disagree():void{
				appCore.dataDeal.dataRemote("bugManagerAPI","BugManagerAPI","disagreeBugUserApplyFlow1st",[billId]);
				appCore.dataDeal.remoteMethods.addEventListener(ResultEvent.RESULT, disagreeResult);
			}
			
			private function disagreeResult(event:ResultEvent):void {
				//TAlert.show("数据生效");
			}
			
			/**向数据库存入页面修改数据后的处理*/
			private function modifyDemand4DemandFlowHandle(event:ResultEvent):void{
				var obj:Object = getResultObj(event);
				if(obj == "1"){
					developmentManager.sText = developerManagerName;
					msg.text = "保存成功！";
					msg.visible = true;
					FlowBillModi = new Event("FlowBillSave");
					this.dispatchEvent(FlowBillModi);
				}else{
					msg.text = "系统繁忙，稍后再试！";
					msg.visible = true;
				}
				timer = new Timer(3000, 1);
				timer.addEventListener(TimerEvent.TIMER,deferredMethod);
				timer.start();
			}
			
			/**取消显示隐藏信息*/
			private function deferredMethod(event:TimerEvent):void{
				msg.visible = false;
			}
			
			/**将页面值封装到对象里*/
			public function createObject4Save():Object{
				var df:DateFormatter = new DateFormatter();
				df.formatString="YYYY-MM-DD";
				
				var obj:Object = new Object();
				obj = userApply;
				//开发经理
				var developManager:Object = new Object();
				if(developmentManager.selectObj.hasOwnProperty("userId")){
					developManager.id = developmentManager.selectObj.userId;
					developerManagerName = developmentManager.selectObj.userName;
				}else{
					developManager.id = userApply!=null?userApply.developManager.id:-1;
					developerManagerName = userApply!=null?userApply.developManager.userName:"";
				}
				obj.developManager = developManager;
//				//计划完成时间
//				if(planFinishDate.selectedDate != null && planFinishDate.text != "")
//					obj.planFinishTime = df.format(planFinishDate.selectedDate);
//				//受理时间
//				obj.replyTime = df.format(now);
				//请求单状态
				obj.applyStatus = userApply!=null?userApply.applyStatus:1;
				return obj;
			}
			
			/**验证方法*/
			private function validateForm(event:Event):void  
			{                     
				//检查验证传递和返回一个布尔值相应。 
				//保存引用当前集中表单控件 
				//这样isValid()辅助方法可以只通知 
				//当前集中形式控制和不影响 
				//任何其他的表单控件。 
				focussedFormControl = event.target as DisplayObject;   
				
				var info:String = BugUtil.compareDate( 
					DateField.dateToString(new Date(),"YYYY-MM-DD"),
					planFinishDate.text);
				
				var obj:Object = new Object();
				if(developmentManager.sText == ""){
					if(developmentManager.selectObj != null 
						&& developmentManager.selectObj.hasOwnProperty("userId"))
						obj.userId = developmentManager.selectObj.userId;
				}else
					obj.userId = 0;
				
				// 标记表单有效的开始 
				formIsValid = info == "1" 
					&& obj.hasOwnProperty("userId");
				
				// 检查表单是否为空 
				formIsEmpty = planFinishDate.text == "" || 
					developmentManager.sText == ""; 
				
				//运行每个验证器反过来,使用isValid() 
				//辅助方法和更新formIsValid的价值 
				//因此。 
				validate(planFinishDateV1);
				validate(planFinishDateV2);
				
				//闪烁提示
				if(this.currentState == "canModify")
				if(formIsEmpty){
					lbBeforeSave.text="↙红色字段为必填项！";
					showAndHideLabel(formIsEmpty);
				}else{
					lbBeforeSave.text="↙计划完成时间不应早于当前时间！";
					showAndHideLabel(!formIsValid);
				}
			} 
			
			/** 
			 * 验证方法 
			 * */ 
			private function validate(validator:Validator):Boolean 
			{                 
				//得到验证对象 
				var validatorSource:DisplayObject = validator.source as DisplayObject; 
				
				//镇压事件如果当前控制被验证的不是 
				//当前集中控制的形式。这阻止了用户 
				//从接收视觉验证提示在其他表单控件。 
				var suppressEvents:Boolean = (validatorSource != focussedFormControl); 
				
				//执行验证。返回一个ValidationResultEvent。 
				//传递null作为第一个参数使验证器 
				//使用属性中定义的属性的标记 
				// < mx:Validator >标记。 
				var event:ValidationResultEvent = validator.validate(null, suppressEvents);  
				
				//检查验证传递和返回一个布尔值。 
				var currentControlIsValid:Boolean = (event.type == ValidationResultEvent.VALID); 
				
				// 修改验证标记 
				formIsValid = formIsValid && currentControlIsValid; 
				
				return currentControlIsValid; 
			} 
			
			/** 
			 *  清除验证信息 重置功能 
			 * */ 
			private function clearFormHandler():void 
			{ 
				// 清除所有的值 
				planFinishDate.text = "";
				
				// 清除错误信息 
				planFinishDate.errorString = "";
				
				// 标记为清空 
				formIsEmpty = true; 
				
				//				// 获取到焦点 
				//				resetFocus();                
			} 
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="canModify"/>
		<!--<s:State name="normal"/>-->
	</s:states>
	
	<s:VGroup width="100%" height="100%">
	
		<s:HGroup id="buttonGroup" width="100%" height="25">
			<s:Button id="saveBtn" includeIn="canModify" width="75" height="100%" label="保存"
					  click="saveBtn_click_handle(event)" enabled="{formIsValid}"
					  icon="@Embed(source='assets/img/icon/save.png')"/>
			<s:Label id="lbBeforeSave" includeIn="canModify" visible="{formIsEmpty}" width="12%"
					 height="100%" filters="{filter}" text="↙红色字段为必填项！" color="red" verticalAlign="top"/>
			<s:Label id="msg" visible="false" width="10%" height="100%" color="red" fontWeight="bold"
					 text="保存成功!"/>
		</s:HGroup>
		<s:Scroller width="100%" height="100%">
			<s:VGroup width="100%" height="99%">
		<!--<mx:VDividedBox width="100%" height="100%">	-->
			
			<s:VGroup width="100%" height="35%" minHeight="120">
		<s:HGroup id="top" width="100%" height="25">
			<control:FormLabel includeIn="canModify" width="16%" height="100%" required="true"
							   text="开发经理：" textAlign="right"/>
			<!--<s:Label width="10%" height="100%" 
					 text="开发经理："
					 textAlign="right"
					 includeIn="normal"/>-->
			<bugmxml:BugFieldSelect id="developmentManager" includeIn="canModify" width="26%"
									height="100%"
									armTitleWindow="com.itsm.serviceManager.common.selectWindow.user.SelectUser"
									isMultipleSelected="false" selectChange="validateForm(event)"
									sText="{userApply!=null          ?userApply.developManager!=null          ?userApply.developManager.userName:'':''}"
									sysID="{sysID}" textAlign="left" userStatus="204"/>
			<!--<s:TextInput width="20%" height="100%"
						 textAlign="left"
						 editable="false"
						 text="{userApply!=null
						 ?userApply.developManager!=null
						 ?userApply.developManager.userName:'':''}"
						 includeIn="normal"/>-->
			
			<control:FormLabel includeIn="canModify" width="16%" height="100%" required="true"
							   text="计划完成时间：" textAlign="right"/>
			<!--<s:Label width="10%" height="100%" text="计划完成时间："
					 textAlign="right"
					 includeIn="normal"/>-->
			<control:DateFieldFl id="planFinishDate" includeIn="canModify" width="16%" height="100%"
								 change="validateForm(event);"
								 disabledRanges="{[ {rangeEnd: new Date(now.fullYear, now.month, now.date-1)}]}"
								 editable="false" formatString="YYYY-MM-DD"
								 text="{BugUtil.formateDate(userApply != null ? userApply.planFinishTime : '')}"
								 textAlign="left"/>
			<!--<s:TextInput width="20%" height="100%"
						 editable="false" 
						 textAlign="left"
						 text="{userApply!=null?userApply.planFinishTime:''}"
						 includeIn="normal"/>-->
		</s:HGroup>
		
	<s:HGroup id="bottom" width="100%" height="70%" paddingTop="5">
		<s:Label width="16%" height="100%" text="客户需求内容：" textAlign="right"/>
		<s:TextArea id="userDemandContent" width="84%" height="100%" editable="false"
					text="{userApply.directions}"/>
	</s:HGroup>
			</s:VGroup>	
			<s:VGroup width="100%" height="35%" minHeight="175">
				
				<container:GroupBox width="100%" height="100%" title="附件">
					<mxml:UploadDocumentsInfo id="fileGrid" width="100%" height="100%"
											  attachMentsArr="{userApply.attachments}"
											  busDataId="{billId}" busTableName="{applyTableName}"
											  deleteBtnEnable="false" doubleClickEnabled="true"
											  uploadBtnEnable="true"/>
				</container:GroupBox>
				
			</s:VGroup>
			
		<s:HGroup width="100%" height="30%" minHeight="240">
			<flow:ComApproveHistory id="AppHistoryGrid" width="100%" height="100%"/>
		</s:HGroup>
			
	<!--</mx:VDividedBox>-->
			</s:VGroup>
		</s:Scroller>
	</s:VGroup>
		
</s:Module>
