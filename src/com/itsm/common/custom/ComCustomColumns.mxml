<?xml version="1.0" encoding="utf-8"?>
<container:TitleWindowFl xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   minWidth="360" minHeight="300" 
					   close="closeHandler(event)" 
					   creationComplete="initWindows()"
					   title="显示列设置" 
					   xmlns:base="com.wfm.flex.common.base.*" 
					   xmlns:c="http://www.c.sccl.com"
					   xmlns:container="com.framelib.container.*">
	<fx:Declarations>
		<!--声明-->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serializers.json.JSONEncoder;
			import com.itsm.common.utils.DataDeal;
			import com.framelib.container.TitleWindowFl;
			import com.framelib.events.EventReflashWin;
			
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.CheckBox;
			import spark.components.VGroup;
					     
			public var headerArray:Array;      //记录所有表头字段
			public var headersData:Array;      //记录已选表头字段
			public var userId:Number;          //自定义用户ID
			public var moduleName:String;      //自定义显示列模块名
			public var customColumnObjId:String = "";
			
			//每10个checkbox一列，加完一列，开始新的一列
			private var tmp_vgroup:VGroup;
			//已经添加的Vgroup的name数组
			private var addedVgroup:Array = new Array();
			//现在在加第几个checkbox
			private var addCheckBoxNum:int = 1;
			//已经添加的checkbox的name数组
			private var addedCheckBox:Array = new Array();
			
			 //初始化窗口
		     public function initWindows():void
		     {
		     	//初始化窗口的CheckBox
		     	for (var i:int=0; i<headerArray.length; i++)
		     	{
		     		//如果程序员设置了visible==false，那么就不能让用户再选择是否显示;
			 		/* if ((headerArray[i] as DataGridColumn). == false)	
			 			continue; */
					
					//dataField为空的列，不能被用户设置
					if ((headerArray[i] as DataGridColumn).dataField == "" 
						|| (headerArray[i] as DataGridColumn).dataField == null
						|| (headerArray[i] as DataGridColumn).dataField == "序号")	
						continue;
					
		     		var headerText:String = (headerArray[i] as DataGridColumn).headerText;
		     		var dataField:String = (headerArray[i] as DataGridColumn).dataField;
					
		     		var isSelect:Boolean = false;
					
	     			//如果已选CheckBox为空就将所有可选定义为选中
		     		if ((headersData == null) || (headersData.length == 0))
		     			isSelect = true;
		     		else
		     		{
			     		for (var j:int=0;j<headersData.length;j++)
			     		{
			     			var itemStr:String = headersData[j] as String;
			     			if (itemStr.toLowerCase() == dataField.toLowerCase())
			     			{
			     				isSelect = true;
			     				break;
			     			}
			     		}
		     		}
					
		     		createCheckBox(headerText,dataField,isSelect);
		     	}
		     }
		     
		     //创建窗口中的CheckBox
		     //header:显示名
		     //Field:字段名
		     //isSel:是否被选中
		     private function createCheckBox(header:String,field:String,isSel:Boolean):void
		     {
				 if(addCheckBoxNum%10 == 1)
				 {
					 tmp_vgroup = new VGroup();
					 tmp_vgroup.percentHeight = 100;
					 tmp_vgroup.name = "vgroup_" + addCheckBoxNum;
					 
					 groupMain.addElement(tmp_vgroup);
					 addedVgroup.push(tmp_vgroup.name);
				 }
				 
		     	var myCheck:CheckBox = new CheckBox();
		     	myCheck.name = field;
		     	myCheck.label = header;
		     	myCheck.selected = isSel;
				
				tmp_vgroup.addElement(myCheck);
				addedCheckBox.push(myCheck.name);
				addCheckBoxNum ++;
		     }
		     
		    //确定按钮 
			private function okClickHandler(event:Event):void
			{
				//用与判断是否和初始选项一致，一致将不更新数据
				var isHas:Boolean = false;         
				var oldHeadersData:Array = new Array();
				oldHeadersData = headersData;
				headersData = new Array();
				
				for(var j:int=0; j<addedVgroup.length; j++)
				{
					for (var i:int=0; i<addedCheckBox.length; i++)
					{
						var tmp_vgroup:VGroup = groupMain.getChildByName(addedVgroup[j]) as VGroup;
						var tmp_checkBox:CheckBox = tmp_vgroup.getChildByName(addedCheckBox[i]) as CheckBox;
						if(tmp_checkBox != null)
							if (tmp_checkBox.selected)
								headersData.push(addedCheckBox[i]);
					}
				}
				
				if (oldHeadersData.toString().toLowerCase() == headersData.toString().toLowerCase())
					isHas = false;
				else
					isHas = true;
				
				if (isHas)
				{
					//更新数据
					var headerString:String = headersData.toString();
					var sDataDeal:DataDeal = new DataDeal();
					var comCustomcolumns:Object = new Object();
					comCustomcolumns.moduleName = moduleName;
					comCustomcolumns.userId = userId;
					comCustomcolumns.columns = headerString;
					if(customColumnObjId != "") {
						comCustomcolumns.id = customColumnObjId;
					}
					sDataDeal.dataRemote("frameAPI","FrameAPI","addCustomcolumns",[new JSONEncoder().encode(comCustomcolumns)]);
					sDataDeal.remoteMethods.addEventListener(ResultEvent.RESULT,receivedCount);
				}
				else
				{
					closeHandler(event);
				}
			}
		    
		    //保存成功退出。
			private function receivedCount(result:ResultEvent ):void
			{
				var e:EventReflashWin = new EventReflashWin();
				dispatchEvent(e);
				closeHandler(result);
			}
	
		]]>
	</fx:Script> 
	
	<s:HGroup id="groupMain" width="100%" height="100%" 
			  paddingBottom="6" paddingLeft="6" paddingRight="6" paddingTop="6"> 
	</s:HGroup>
		
	<container:controlBarContent>
		<s:HGroup width="100%" horizontalAlign="right">
			<mx:Button label="确定" id="butUpdate" icon="@Embed(source='assets/img/icon/sure.png')"
					   click="okClickHandler(event)"/>
			<mx:Button label="取消" id="butCancel" icon="@Embed(source='assets/img/icon/cancel.png')"
					   click="{closeHandler(event)}" />
		</s:HGroup>
	</container:controlBarContent>
		
</container:TitleWindowFl>
